/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.practicum.explorewithme.api;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import ru.practicum.explorewithme.model.*;

import javax.validation.Valid;
import java.util.List;

//@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-11-13T14:31:14.091Z[GMT]")
@Validated
@RestController
public interface AdminApi {


    @RequestMapping(value = "/admin/compilations/{compId}/events/{eventId}",
            produces = {"application/json"},
            method = RequestMethod.PATCH)
    ResponseEntity<Void> addEventToCompilation(@PathVariable("compId") Long compId, @PathVariable("eventId") Long eventId);

    //Users {
    @RequestMapping(value = "/admin/users/{userId}",
            produces = {"application/json"},
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUser(@PathVariable("userId") Long userId);

    @RequestMapping(value = "/admin/users",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<UserDto>> getUsers(
            @Valid @RequestParam(value = "ids", required = false) List<Long> ids,
            @Valid @RequestParam(value = "from", required = false, defaultValue = "0") Integer from,
            @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Integer size);

    @RequestMapping(value = "/admin/users",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<UserDto> registerUser(@Valid @RequestBody NewUserRequest body);
    //} Users

    //Categories {
    @RequestMapping(value = "/admin/categories",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<CategoryDto> addCategory(@Valid @RequestBody NewCategoryDto body);

    @RequestMapping(value = "/admin/categories/{catId}",
            produces = {"application/json"},
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteCategory(@PathVariable("catId") Long catId);

    @RequestMapping(value = "/admin/categories",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.PATCH)
    ResponseEntity<CategoryDto> updateCategory(@Valid @RequestBody CategoryDto body);
    //} Categories

    //Compilation {
    @RequestMapping(value = "/admin/compilations/{compId}",
            produces = {"application/json"},
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteCompilation(@PathVariable("compId") Long compId);

    @RequestMapping(value = "/admin/compilations/{compId}/pin",
            produces = {"application/json"},
            method = RequestMethod.PATCH)
    ResponseEntity<Void> pin(@PathVariable("compId") Long compId);

    @RequestMapping(value = "/admin/compilations/{compId}/events/{eventId}",
            produces = {"application/json"},
            method = RequestMethod.DELETE)
    ResponseEntity<Void> removeEventFromCompilation(@PathVariable("compId") Long compId, @PathVariable("eventId") Long eventId);

    @RequestMapping(value = "/admin/compilations",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<CompilationDto> saveCompilation(@Valid @RequestBody NewCompilationDto body);

    @RequestMapping(value = "/admin/compilations/{compId}/pin",
            produces = {"application/json"},
            method = RequestMethod.DELETE)
    ResponseEntity<Void> unpin(@PathVariable("compId") Long compId);
    //} Compilation

    //Events {
    @RequestMapping(value = "/admin/events",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<EventFullDto>> getEvents2(
            @Valid @RequestParam(value = "users", required = false) List<Long> users,
            @Valid @RequestParam(value = "states", required = false) List<String> states,
            @Valid @RequestParam(value = "categories", required = false) List<Long> categories,
            @Valid @RequestParam(value = "rangeStart", required = false) String rangeStart,
            @Valid @RequestParam(value = "rangeEnd", required = false) String rangeEnd,
            @Valid @RequestParam(value = "from", required = false, defaultValue = "0") Integer from,
            @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Integer size);

    @RequestMapping(value = "/admin/events/{eventId}/publish",
            produces = {"application/json"},
            method = RequestMethod.PATCH)
    ResponseEntity<EventFullDto> publishEvent(@PathVariable("eventId") Long eventId);

    @RequestMapping(value = "/admin/events/{eventId}/reject",
            produces = {"application/json"},
            method = RequestMethod.PATCH)
    ResponseEntity<EventFullDto> rejectEvent(@PathVariable("eventId") Long eventId);

    @RequestMapping(value = "/admin/events/{eventId}",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.PUT)
    ResponseEntity<EventFullDto> updateEvent(@PathVariable("eventId") Long eventId, @Valid @RequestBody AdminUpdateEventRequest body);
    //} Events

}

